(assume a0 (= a b))
(assume a1 (= c d))
(assume a2 (and p1 true))
(assume a3 (or (not p1) (and p2 p3)))
(assume a4 (or (not p3) (not (= (f a c) (f b d)))))
(step t0 (cl (not (= (not (= (f a c) (f b d))) false)) (not (not (= (f a c) (f b d)))) false) :rule equiv_pos2)
(step t1 (cl (= (f a c) (f b d))) :rule cong :premises (a0 a1))
(step t2 (cl (= (f b d) (f b d))) :rule refl)
(step t3 (cl (= (= (f a c) (f b d)) (= (f b d) (f b d)))) :rule cong :premises (t1 t2))
(step t4 (cl (= (not (= (f a c) (f b d))) (not (= (f b d) (f b d))))) :rule cong :premises (t3))
(step t5 (cl (= (= (f b d) (f b d)) true)) :rule rare_rewrite :args ("eq-refl" (f b d)))
(step t6 (cl (= (not (= (f b d) (f b d))) (not true))) :rule cong :premises (t5))
(step t7 (cl (= (not true) false)) :rule rare_rewrite :args ("evaluate"))
(step t8 (cl (= (not (= (f b d) (f b d))) false)) :rule trans :premises (t6 t7))
(step t9 (cl (= (not (= (f a c) (f b d))) false)) :rule trans :premises (t4 t8))
(step t10 (cl (not p3) (not (= (f a c) (f b d)))) :rule or :premises (a4))
(step t11 (cl (not p1) (and p2 p3)) :rule or :premises (a3))
(step t12 (cl p1) :rule and :premises (a2))
(step t13 (cl (and p2 p3)) :rule resolution :premises (t11 t12) :args (p1 false))
(step t14 (cl p3) :rule and :premises (t13))
(step t15 (cl (not (= (f a c) (f b d)))) :rule resolution :premises (t10 t14) :args (p3 false))
(step t16 (cl false) :rule resolution :premises (t0 t9 t15) :args ((= (not (= (f a c) (f b d))) false) false (not (= (f a c) (f b d))) false))
(step t17 (cl (not false)) :rule false)
(step t18 (cl) :rule resolution :premises (t16 t17) :args (false true))

